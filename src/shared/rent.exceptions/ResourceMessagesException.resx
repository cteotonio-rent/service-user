<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DRIVERS_LICENSE_ALREADY_REGISTERED" xml:space="preserve">
    <value>Driver's License Category already exists.</value>
  </data>
  <data name="DRIVERS_LICENSE_CATEGORY_EMPTY" xml:space="preserve">
    <value>Driver's License Category is empty.</value>
  </data>
  <data name="DRIVERS_LICENSE_CATEGORY_INVALID" xml:space="preserve">
    <value>Driver's License Category is invalid.</value>
  </data>
  <data name="DRIVERS_LICENSE_EMPTY" xml:space="preserve">
    <value>Driver's License is empty.</value>
  </data>
  <data name="EMAIL_ALREADY_REGISTERED" xml:space="preserve">
    <value>Email already exists.</value>
  </data>
  <data name="EMAIL_EMPTY" xml:space="preserve">
    <value>The email cannot be empty.</value>
  </data>
  <data name="EMAIL_INVALID" xml:space="preserve">
    <value>The email is invalid.</value>
  </data>
  <data name="EMAIL_OR_PASSWORD_INVALID" xml:space="preserve">
    <value>Invalid email and/or password.</value>
  </data>
  <data name="FILE_TYPE_INVALID" xml:space="preserve">
    <value>Invalid file type. Only PNG and BMP files are allowed.</value>
  </data>
  <data name="LICENSE_PLATE_ALREADY_REGISTERED" xml:space="preserve">
    <value>License Plate already exists.</value>
  </data>
  <data name="LICENSE_PLATE_EMPTY" xml:space="preserve">
    <value>License plate is empty.</value>
  </data>
  <data name="MODEL_EMPTY" xml:space="preserve">
    <value>Model is empty.</value>
  </data>
  <data name="MOTORCYCLE_NOT_AVAILABLE" xml:space="preserve">
    <value>No motorcycle available.</value>
  </data>
  <data name="MOTORCYCLE_RENTAL_HITORY" xml:space="preserve">
    <value>There is a rental history.</value>
  </data>
  <data name="NAME_EMPTY" xml:space="preserve">
    <value>The name cannot be empty.</value>
  </data>
  <data name="NOTIFICATION_NOT_SEND" xml:space="preserve">
    <value>Notification was not sent to you.</value>
  </data>
  <data name="NO_TOKEN" xml:space="preserve">
    <value>No token.</value>
  </data>
  <data name="NRLE_ALREADY_REGISTERED" xml:space="preserve">
    <value>National Registry of Legal Entities already exists.</value>
  </data>
  <data name="NRLE_EMPTY" xml:space="preserve">
    <value>National Registry of Legal Entities is empty.</value>
  </data>
  <data name="ORDER_ACCEPTED" xml:space="preserve">
    <value>Order already accepted</value>
  </data>
  <data name="ORDER_ACCEPTED_ANOTHER_USER" xml:space="preserve">
    <value>Order accepted by another user.</value>
  </data>
  <data name="ORDER_NOT_ACCEPTED" xml:space="preserve">
    <value>Order not accepted</value>
  </data>
  <data name="ORDER_NOT_AVAILABLE" xml:space="preserve">
    <value>Order is not available.</value>
  </data>
  <data name="ORDER_PRICE_INVALID" xml:space="preserve">
    <value>Order Price is invalid.</value>
  </data>
  <data name="PASSWORD_EMPTY" xml:space="preserve">
    <value>The password must be longer than 6 characters.</value>
  </data>
  <data name="REAL_END_DATE_INVALID" xml:space="preserve">
    <value>Return date must be greater than withdrawal date.</value>
  </data>
  <data name="RENTAL_PLAN_DAYS_INVALID" xml:space="preserve">
    <value>Os dias do plano de aluguel são obrigatórios.</value>
  </data>
  <data name="RENTAL_PLAN_DAYS_NOT_ALLOWED" xml:space="preserve">
    <value>Plano de aluguel não é permitido.</value>
  </data>
  <data name="RENTAL_PLAN_NOT_EXIST" xml:space="preserve">
    <value>Rental plan does not exist.</value>
  </data>
  <data name="RESOURCE_NOT_FOUND" xml:space="preserve">
    <value>Resource not fund.</value>
  </data>
  <data name="UNAUTHORIZED_ACCESS" xml:space="preserve">
    <value>Attempted to perform an unauthorized operation.</value>
  </data>
  <data name="UNKNOWN_ERROR" xml:space="preserve">
    <value>Unknown error.</value>
  </data>
  <data name="USER_WITHOUT_PERMISSION_ACCESS_RESOURCE" xml:space="preserve">
    <value>User not allowed to access the resource.</value>
  </data>
  <data name="YEAR_EMPTY" xml:space="preserve">
    <value>Year is empty.</value>
  </data>
  <data name="YEAR_INVALID_IS_NOT_NUMBER" xml:space="preserve">
    <value>Year is not number.</value>
  </data>
  <data name="YEAR_QTDE_CHARACTERES_INVALID" xml:space="preserve">
    <value>Number of characteres is invalid.</value>
  </data>
</root>